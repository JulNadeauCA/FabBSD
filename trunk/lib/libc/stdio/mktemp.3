.\"	$OpenBSD: mktemp.3,v 1.41 2007/05/31 19:19:31 jmc Exp $
.\"
.\" Copyright (c) 1989, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: May 31 2007 $
.Dt MKTEMP 3
.Os
.Sh NAME
.Nm mktemp ,
.Nm mkstemp ,
.Nm mkstemps ,
.Nm mkdtemp
.Nd make temporary file name (unique)
.Sh SYNOPSIS
.Fd #include <stdlib.h>
.Ft char *
.Fn mktemp "char *template"
.Ft int
.Fn mkstemp "char *template"
.Ft int
.Fn mkstemps "char *template" "int suffixlen"
.Ft char *
.Fn mkdtemp "char *template"
.Sh DESCRIPTION
The
.Fn mktemp
family of functions take the given file name template and overwrite
a portion of it to create a new file name.
This file name is unique and suitable for use by the application.
The template may be any file name with some number of
.So Li X
.Sc Ns s
appended
to it, for example
.Pa /tmp/temp.XXXXXX .
The trailing
.So Li X Sc Ns s
are replaced with the current process number and/or a
unique letter combination.
The number of unique file names that
can be returned depends on the number of
.So Li X Sc Ns s
provided; six
.So Li X
.Sc Ns s
will
result in
.Fn mktemp
testing roughly 26 ** 6 combinations.
At least 6
.So Li X
.Sc Ns s
should be used, though 10 is much better.
.Pp
The
.Fn mktemp
function generates a temporary file name based on a template as
described above.
Because
.Fn mktemp
does not actually create the temporary file there is a window of
opportunity during which another process can open the file instead.
Because of this race condition,
.Fn mktemp
should not be used in new code.
.Fn mktemp
was marked as a legacy interface in
.St -p1003.1-2001
and may be removed in a future release of
.Ox .
.Pp
The
.Fn mkstemp
function makes the same replacement to the template and creates the template
file, mode 0600, returning a file descriptor opened for reading and writing.
This avoids the race between testing for a file's existence and opening it
for use.
.Pp
The
.Fn mkstemps
function acts the same as
.Fn mkstemp ,
except it permits a suffix to exist in the template.
The template should be of the form
.Pa /tmp/tmpXXXXXXXXXXsuffix .
.Fn mkstemps
is told the length of the suffix string, i.e.,
.Li strlen("suffix") .
.Pp
The
.Fn mkdtemp
function makes the same replacement to the template as in
.Fn mktemp
and creates the template directory, mode 0700.
.Sh RETURN VALUES
The
.Fn mktemp
and
.Fn mkdtemp
functions return a pointer to the template on success and
.Dv NULL
on failure.
The
.Fn mkstemp
and
.Fn mkstemps
functions return \-1 if no suitable file could be created.
If any call fails, an error code is placed in the global variable
.Va errno .
.Sh EXAMPLES
Quite often a programmer will want to replace a use of
.Fn mktemp
with
.Fn mkstemp ,
usually to avoid the problems described above.
Doing this correctly requires a good understanding of the code in question.
.Pp
For instance, code of this form:
.Bd -literal -offset indent
char sfn[19];
FILE *sfp;

strlcpy(sfn, "/tmp/ed.XXXXXXXXXX", sizeof(sfn));
if (mktemp(sfn) == NULL || (sfp = fopen(sfn, "w+")) == NULL) {
	warn("%s", sfn);
	return (NULL);
}
return (sfp);
.Ed
.Pp
should be rewritten like this:
.Bd -literal -offset indent
char sfn[19];
FILE *sfp;
int fd;

strlcpy(sfn, "/tmp/ed.XXXXXXXXXX", sizeof(sfn));
if ((fd = mkstemp(sfn)) == -1 ||
    (sfp = fdopen(fd, "w+")) == NULL) {
	if (fd != -1) {
		unlink(sfn);
		close(fd);
	}
	warn("%s", sfn);
	return (NULL);
}
return (sfp);
.Ed
.Pp
Often one will find code which uses
.Fn mktemp
very early on, perhaps to globally initialize the template nicely, but the
code which calls
.Xr open 2
or
.Xr fopen 3
on that file name will occur much later.
(In almost all cases, the use of
.Xr fopen 3
will mean that the flags
.Dv O_CREAT
|
.Dv O_EXCL
are not given to
.Xr open 2 ,
and thus a symbolic link race becomes possible, hence making
necessary the use of
.Xr fdopen 3
as seen above.)
Furthermore, one must be careful about code which opens, closes, and then
re-opens the file in question.
Finally, one must ensure that upon error the temporary file is
removed correctly.
.Pp
There are also cases where modifying the code to use
.Fn mktemp ,
in concert with
.Xr open 2
using the flags
.Dv O_CREAT
|
.Dv O_EXCL ,
is better, as long as the code retries a new template if
.Xr open 2
fails with an
.Va errno
of
.Er EEXIST .
.Sh ERRORS
The
.Fn mkstemp
and
.Fn mkdtemp
functions may set
.Va errno
to one of the following values:
.Bl -tag -width Er
.It Bq Er ENOTDIR
The path name portion of the template is not an existing directory.
.El
.Pp
The
.Fn mkstemp
and
.Fn mkdtemp
functions may also set
.Va errno
to any value specified by the
.Xr stat 2
function.
.Pp
The
.Fn mkstemp
function may also set
.Va errno
to any value specified by the
.Xr open 2
function.
.Pp
The
.Fn mkstemps
function may also set
.Va errno
to any value specified by the
.Xr open 2
function or,
.Bl -tag -width Er
.It Bq Er EINVAL
The suffix length is longer than the template length.
.El
.Pp
The
.Fn mkdtemp
function may also set
.Va errno
to any value specified by the
.Xr mkdir 2
function.
.Sh SEE ALSO
.Xr chmod 2 ,
.Xr getpid 2 ,
.Xr mkdir 2 ,
.Xr open 2 ,
.Xr stat 2 ,
.Xr tempnam 3 ,
.Xr tmpfile 3 ,
.Xr tmpnam 3
.Sh HISTORY
A
.Fn mktemp
function appeared in
.At v7 .
The
.Fn mkdtemp
function appeared in
.Ox 2.2 .
The
.Fn mkstemp
function appeared in
.Bx 4.4 .
The
.Fn mkstemps
function appeared in
.Ox 2.3 .
.Sh BUGS
For
.Fn mktemp
there is an obvious race between file name selection and file
creation and deletion: the program is typically written to call
.Xr tmpnam 3 ,
.Xr tempnam 3 ,
or
.Fn mktemp .
Subsequently, the program calls
.Xr open 2
or
.Xr fopen 3
and erroneously opens a file (or symbolic link, FIFO or other
device) that the attacker has created in the expected file location.
Hence
.Fn mkstemp
is recommended, since it atomically creates the file.
An attacker can guess the file names produced by
.Fn mktemp .
Whenever it is possible,
.Fn mkstemp
or
.Fn mkdtemp
should be used instead.
.Pp
For this reason,
.Xr ld 1
will output a warning message whenever it links code that uses
.Fn mktemp .
.Pp
The
.Fn mkdtemp
and
.Fn mkstemps
functions are non-standard and should not be used if portability is required.
