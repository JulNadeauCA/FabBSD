.\"	$OpenBSD: evdns.3,v 1.5 2007/05/31 19:19:35 jmc Exp $
.\"
.\" Copyright (c) 2006 Niels Provos <provos@citi.umich.edu>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
.\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
.\" AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
.\" THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
.\" EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
.\" PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
.\" OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
.\" WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
.\" OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
.\" ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: May 31 2007 $
.Dt EVDNS 3
.Os
.Sh NAME
.Nm evdns_init ,
.Nm evdns_shutdown ,
.Nm evdns_err_to_string ,
.Nm evdns_nameserver_add ,
.Nm evdns_count_nameservers ,
.Nm evdns_clear_nameservers_and_suspend ,
.Nm evdns_resume ,
.Nm evdns_nameserver_ip_add ,
.Nm evdns_resolve_ipv4 ,
.Nm evdns_resolve_reverse ,
.Nm evdns_resolv_conf_parse ,
.Nm evdns_search_clear ,
.Nm evdns_search_add ,
.Nm evdns_search_ndots_set ,
.Nm evdns_set_log_fn
.Nd asynchronous functions for DNS resolution
.Sh SYNOPSIS
.Fd #include <sys/time.h>
.Fd #include <event.h>
.Fd #include <evdns.h>
.Ft int
.Fn evdns_init
.Ft void
.Fn evdns_shutdown "int fail_requests"
.Ft "const char *"
.Fn evdns_err_to_string "int err"
.Ft int
.Fn evdns_nameserver_add "unsigned long int address"
.Ft int
.Fn evdns_count_nameservers
.Ft int
.Fn evdns_clear_nameservers_and_suspend
.Ft int
.Fn evdns_resume
.Ft int
.Fn evdns_nameserver_ip_add "const char *ip_as_string"
.Ft int
.Fn evdns_resolve_ipv4 "const char *name" "int flags" "evdns_callback_type callback" "void *ptr"
.Ft int
.Fn evdns_resolve_reverse "struct in_addr *in" "int flags" "evdns_callback_type callback" "void *ptr"
.Ft int
.Fn evdns_resolv_conf_parse "int flags" "const char *"
.Ft void
.Fn evdns_search_clear
.Ft void
.Fn evdns_search_add "const char *domain"
.Ft void
.Fn evdns_search_ndots_set "const int ndots"
.Ft void
.Fn evdns_set_log_fn "evdns_debug_log_fn_type fn"
.Sh DESCRIPTION
Welcome, gentle reader.
.Pp
Asynchronous DNS lookups are really a whole lot harder
than they should be,
mostly stemming from the fact that the libc resolver has never been
very good at them.
Before you use this library you should see if libc
can do the job for you with the modern async call
.Fn getaddrinfo_a
(see http://www.imperialviolet.org/page25.html#e498).
Otherwise, please continue.
.Pp
This code is based on libevent and
.Fn event_init
must be called before
any of the APIs in this file.
.Pp
The library keeps track of the state of nameservers and will avoid
them when they go down.
Otherwise it will round robin between them.
.Pp
Quick start guide:
.Bd -literal -offset indent
#include "evdns.h"
void callback(int result, char type, int count, int ttl,
    void *addresses, void *arg);
evdns_resolv_conf_parse(DNS_OPTIONS_ALL, "/etc/resolv.conf");
evdns_resolve("www.hostname.com", 0, callback, NULL);
.Ed
.Pp
When the lookup is complete, the callback function is called.
The first argument will be one of the DNS_ERR_* defines in
.Aq Pa evdns.h .
Hopefully it will be
.Dv DNS_ERR_NONE ,
in which case type will be
.Dv DNS_IPv4_A ,
.Fa count
will be the number of IP addresses,
.Fa ttl
is the time which the data can be cached for (in seconds),
.Fa addresses
will point to an array of uint32_t's and
.Fa arg
will be whatever was passed to
.Fn evdns_resolve .
.Pp
Searching:
.Pp
In order for this library to be a good replacement for the libc resolver,
it supports searching.
This involves setting a list of default domains, in
which names will be queried for.
The number of dots in the query name
determines the order in which this list is used.
.Pp
Searching appears to be a single lookup from the point of view of the API,
although many DNS queries may be generated from a single call to
.Fn evdns_resolve .
Searching can also drastically slow down the resolution of names.
.Pp
To disable searching:
.Pp
.Bl -enum -compact -offset indent
.It
Never set it up.
If
.Fn evdns_resolv_conf_parse ,
.Fn evdns_init ,
and
.Fn evdns_search_add
are never called
then no searching will occur.
.It
If you do call
.Fn evdns_resolv_conf_parse
then don't pass
.Dv DNS_OPTION_SEARCH
(or
.Dv DNS_OPTIONS_ALL ,
which implies it).
.It
When calling
.Fn evdns_resolve ,
pass the
.Dv DNS_QUERY_NO_SEARCH
flag.
.El
.Pp
The order of searches depends on the number of dots in the name.
If the number is greater than the ndots setting then the names is first tried
globally.
Otherwise each search domain is appended in turn.
.Pp
The ndots setting can either be set from a
.Xr resolv.conf 5 ,
or by calling
.Fn evdns_search_ndots_set .
.Pp
For example, with ndots set to 1 (the default) and a search domain list of
["myhome.net"]:
.Bd -literal -offset indent
Query: www
Order: www.myhome.net, www.

Query: www.abc
Order: www.abc., www.abc.myhome.net
.Ed
.Sh API REFERENCE
.Bl -tag -width 0123456
.It Fn "int evdns_init"
Initializes support for non-blocking name resolution by calling
.Fn evdns_resolv_conf_parse .
.It Fn "int evdns_nameserver_add" "unsigned long int address"
Add a nameserver.
The address should be an IP address in network byte order.
The type of address is chosen so that
it matches in_addr.s_addr.
Returns non-zero on error.
.It Fn "int evdns_nameserver_ip_add" "const char *ip_as_string"
This wraps the above function by parsing a string as an IP
address and adds it as a nameserver.
Returns non-zero on error
.It Fn "int evdns_resolve" "const char *name" "int flags" "evdns_callback_type callback" "void *ptr"
Resolve a name.
The name parameter should be a DNS name.
The flags parameter should be 0, or
.Dv DNS_QUERY_NO_SEARCH
which disables searching for this query
(see the definition of searching, above).
.Pp
The
.Fa callback
argument is a function which is called when
this query completes and
.Fa ptr
is an argument which is passed
to that callback function.
.Pp
Returns non-zero on error.
.It Fn "void evdns_search_clear"
Clears the list of search domains
.It Fn "void evdns_search_add" "const char *domain"
Add a domain to the list of search domains
.It Fn "void evdns_search_ndots_set" "int ndots"
Set the number of dots which, when found in a name, causes
the first query to be without any search domain.
.It Fn "int evdns_count_nameservers" "void"
Return the number of configured nameservers (not necessarily the
number of running nameservers).
This is useful for double checking whether calls to the various
nameserver configuration functions have been successful.
.It Fn "int evdns_clear_nameservers_and_suspend" "void"
Remove all currently configured nameservers, and suspend all pending
resolves.
Resolves will not necessarily be re-attempted until
.Fn evdns_resume
is called.
.It Fn "int evdns_resume" "void"
Re-attempt resolves left in limbo after an earlier call to
.Fn evdns_clear_nameservers_and_suspend .
.It Fn "int evdns_resolv_conf_parse" "int flags" "const char *filename"
Parse a resolv.conf-like file from the given filename.
.Pp
See the man page for
.Xr resolv.conf 5
for the format of this file.
The flags argument determines what information is parsed from
this file:
.Pp
.Bl -tag -width "DNS_OPTION_NAMESERVERS" -offset indent -compact
.It Dv DNS_OPTION_SEARCH
Domain, search, and ndots options.
.It Dv DNS_OPTION_NAMESERVERS
Nameserver lines.
.It Dv DNS_OPTION_MISC
Timeout and attempts options.
.It Dv DNS_OPTIONS_ALL
All of the above.
.El
.Pp
The following directives are not parsed from the file:
lookup and sortlist.
Additionally, the following
.Dq options
are ignored: debug, edns0, inet6, insecure1, and insecure2.
.Pp
Returns non-zero on error:
.Pp
.Bl -tag -width "0XXX" -offset indent -compact
.It 0
no errors
.It 1
failed to open file
.It 2
failed to stat file
.It 3
file too large
.It 4
out of memory
.It 5
short read from file
.El
.El
.Sh INTERNALS
Requests are kept in two queues.
The first is the inflight queue.
In this queue requests have an allocated transaction ID and nameserver.
They will soon be transmitted if they haven't already.
.Pp
The second is the waiting queue.
The size of the inflight ring is
limited and all other requests wait in waiting queue for space.
This limits the number of concurrent requests
so that the nameserver does not get flooded.
Several algorithms require a full walk of the inflight
queue so limiting its size keeps thing going nicely under huge
(many thousands of requests) loads.
.Pp
If a nameserver loses too many requests it is considered down and we
try not to use it.
After a while a probe is sent to that nameserver
(a lookup for google.com) and, if it replies, we consider it working
again.
If the nameserver fails a probe,
we wait longer to try again with the next probe.
.Sh SEE ALSO
.Xr event 3 ,
.Xr gethostbyname 3 ,
.Xr resolv.conf 5
.Sh HISTORY
The
.Nm evdns
API was developed by Adam Langley on top of the
.Nm libevent
API.
The code was integrated into
.Nm Tor
by Nick Mathewson and finally put into
.Nm libevent
itself by Niels Provos.
.Sh AUTHORS
The
.Nm evdns
API and code was written by Adam Langley with significant
contributions by Nick Mathewson.
.Sh BUGS
This documentation is neither complete nor authoritative.
If you are in doubt about the usage of this API then
check the source code to find out how it works, write
up the missing piece of documentation and send it to
me for inclusion in this man page.
