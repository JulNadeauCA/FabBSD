.\"	$OpenBSD: queue.3,v 1.47 2008/07/27 07:06:42 stefan Exp $
.\"	$NetBSD: queue.3,v 1.4 1995/07/03 00:25:36 mycroft Exp $
.\"
.\" Copyright (c) 1993 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)queue.3	8.1 (Berkeley) 12/13/93
.\"
.Dd $Mdocdate: July 27 2008 $
.Dt QUEUE 3
.Os
.Sh NAME
.Nm SLIST_ENTRY ,
.Nm SLIST_HEAD ,
.Nm SLIST_HEAD_INITIALIZER ,
.Nm SLIST_FIRST ,
.Nm SLIST_NEXT ,
.Nm SLIST_END ,
.Nm SLIST_EMPTY ,
.Nm SLIST_FOREACH ,
.Nm SLIST_FOREACH_PREVPTR ,
.Nm SLIST_INIT ,
.Nm SLIST_INSERT_AFTER ,
.Nm SLIST_INSERT_HEAD ,
.Nm SLIST_REMOVE_HEAD ,
.Nm SLIST_REMOVE_NEXT ,
.Nm SLIST_REMOVE ,
.Nm LIST_ENTRY ,
.Nm LIST_HEAD ,
.Nm LIST_HEAD_INITIALIZER ,
.Nm LIST_FIRST ,
.Nm LIST_NEXT ,
.Nm LIST_END ,
.Nm LIST_EMPTY ,
.Nm LIST_FOREACH ,
.Nm LIST_INIT ,
.Nm LIST_INSERT_AFTER ,
.Nm LIST_INSERT_BEFORE ,
.Nm LIST_INSERT_HEAD ,
.Nm LIST_REMOVE ,
.Nm LIST_REPLACE ,
.Nm SIMPLEQ_ENTRY ,
.Nm SIMPLEQ_HEAD ,
.Nm SIMPLEQ_HEAD_INITIALIZER ,
.Nm SIMPLEQ_FIRST ,
.Nm SIMPLEQ_NEXT ,
.Nm SIMPLEQ_END ,
.Nm SIMPLEQ_EMPTY ,
.Nm SIMPLEQ_FOREACH ,
.Nm SIMPLEQ_INIT ,
.Nm SIMPLEQ_INSERT_HEAD ,
.Nm SIMPLEQ_INSERT_TAIL ,
.Nm SIMPLEQ_INSERT_AFTER ,
.Nm SIMPLEQ_REMOVE_HEAD ,
.Nm TAILQ_ENTRY ,
.Nm TAILQ_HEAD ,
.Nm TAILQ_HEAD_INITIALIZER ,
.Nm TAILQ_FIRST ,
.Nm TAILQ_NEXT ,
.Nm TAILQ_END ,
.Nm TAILQ_LAST ,
.Nm TAILQ_PREV ,
.Nm TAILQ_EMPTY ,
.Nm TAILQ_FOREACH ,
.Nm TAILQ_FOREACH_REVERSE ,
.Nm TAILQ_INIT ,
.Nm TAILQ_INSERT_AFTER ,
.Nm TAILQ_INSERT_BEFORE ,
.Nm TAILQ_INSERT_HEAD ,
.Nm TAILQ_INSERT_TAIL ,
.Nm TAILQ_REMOVE ,
.Nm TAILQ_REPLACE ,
.Nm CIRCLEQ_ENTRY ,
.Nm CIRCLEQ_HEAD ,
.Nm CIRCLEQ_HEAD_INITIALIZER ,
.Nm CIRCLEQ_FIRST ,
.Nm CIRCLEQ_LAST ,
.Nm CIRCLEQ_END ,
.Nm CIRCLEQ_NEXT ,
.Nm CIRCLEQ_PREV ,
.Nm CIRCLEQ_EMPTY ,
.Nm CIRCLEQ_FOREACH ,
.Nm CIRCLEQ_FOREACH_REVERSE ,
.Nm CIRCLEQ_INIT ,
.Nm CIRCLEQ_INSERT_AFTER ,
.Nm CIRCLEQ_INSERT_BEFORE ,
.Nm CIRCLEQ_INSERT_HEAD ,
.Nm CIRCLEQ_INSERT_TAIL ,
.Nm CIRCLEQ_REMOVE ,
.Nm CIRCLEQ_REPLACE
.Nd "implementations of singly-linked lists, doubly-linked lists, simple queues, tail queues, and circular queues"
.Sh SYNOPSIS
.Fd #include <sys/queue.h>
.Pp
.Fn SLIST_ENTRY "TYPE"
.Fn SLIST_HEAD "HEADNAME" "TYPE"
.Fn SLIST_HEAD_INITIALIZER "SLIST_HEAD head"
.Ft "struct TYPE *"
.Fn SLIST_FIRST "SLIST_HEAD *head"
.Ft "struct TYPE *"
.Fn SLIST_NEXT "struct TYPE *listelm" "SLIST_ENTRY NAME"
.Ft "struct TYPE *"
.Fn SLIST_END "SLIST_HEAD *head"
.Ft int
.Fn SLIST_EMPTY "SLIST_HEAD *head"
.Fn SLIST_FOREACH "VARNAME" "SLIST_HEAD *head" "SLIST_ENTRY NAME"
.Fn SLIST_FOREACH_PREVPTR "VARNAME" "VARNAMEP" "SLIST_HEAD *head" "SLIST_ENTRY NAME"
.Ft void
.Fn SLIST_INIT "SLIST_HEAD *head"
.Ft void
.Fn SLIST_INSERT_AFTER "struct TYPE *listelm" "struct TYPE *elm" "SLIST_ENTRY NAME"
.Ft void
.Fn SLIST_INSERT_HEAD "SLIST_HEAD *head" "struct TYPE *elm" "SLIST_ENTRY NAME"
.Ft void
.Fn SLIST_REMOVE_HEAD "SLIST_HEAD *head" "SLIST_ENTRY NAME"
.Ft void
.Fn SLIST_REMOVE_NEXT "SLIST_HEAD *head" "struct TYPE *elm" "SLIST_ENTRY NAME"
.Ft void
.Fn SLIST_REMOVE "SLIST_HEAD *head" "struct TYPE *elm" "TYPE" "SLIST_ENTRY NAME"
.Pp
.Fn LIST_ENTRY "TYPE"
.Fn LIST_HEAD "HEADNAME" "TYPE"
.Fn LIST_HEAD_INITIALIZER "LIST_HEAD head"
.Ft "struct TYPE *"
.Fn LIST_FIRST "LIST_HEAD *head"
.Ft "struct TYPE *"
.Fn LIST_NEXT "struct TYPE *listelm" "LIST_ENTRY NAME"
.Ft "struct TYPE *"
.Fn LIST_END "LIST_HEAD *head"
.Ft int
.Fn LIST_EMPTY "LIST_HEAD *head"
.Fn LIST_FOREACH "VARNAME" "LIST_HEAD *head" "LIST_ENTRY NAME"
.Ft void
.Fn LIST_INIT "LIST_HEAD *head"
.Ft void
.Fn LIST_INSERT_AFTER "struct TYPE *listelm" "struct TYPE *elm" "LIST_ENTRY NAME"
.Ft void
.Fn LIST_INSERT_BEFORE "struct TYPE *listelm" "struct TYPE *elm" "LIST_ENTRY NAME"
.Ft void
.Fn LIST_INSERT_HEAD "LIST_HEAD *head" "struct TYPE *elm" "LIST_ENTRY NAME"
.Ft void
.Fn LIST_REMOVE "struct TYPE *elm" "LIST_ENTRY NAME"
.Ft void
.Fn LIST_REPLACE "struct TYPE *elm" "struct TYPE *elm2" "LIST_ENTRY NAME"
.Pp
.Fn SIMPLEQ_ENTRY "TYPE"
.Fn SIMPLEQ_HEAD "HEADNAME" "TYPE"
.Fn SIMPLEQ_HEAD_INITIALIZER "SIMPLEQ_HEAD head"
.Ft "struct TYPE *"
.Fn SIMPLEQ_FIRST "SIMPLEQ_HEAD *head"
.Ft "struct TYPE *"
.Fn SIMPLEQ_NEXT "struct TYPE *listelm" "SIMPLEQ_ENTRY NAME"
.Ft "struct TYPE *"
.Fn SIMPLEQ_END "SIMPLEQ_HEAD *head"
.Ft int
.Fn SIMPLEQ_EMPTY "SIMPLEQ_HEAD *head"
.Fn SIMPLEQ_FOREACH "VARNAME" "SIMPLEQ_HEAD *head" "SIMPLEQ_ENTRY NAME"
.Ft void
.Fn SIMPLEQ_INIT "SIMPLEQ_HEAD *head"
.Ft void
.Fn SIMPLEQ_INSERT_HEAD "SIMPLEQ_HEAD *head" "struct TYPE *elm" "SIMPLEQ_ENTRY NAME"
.Ft void
.Fn SIMPLEQ_INSERT_TAIL "SIMPLEQ_HEAD *head" "struct TYPE *elm" "SIMPLEQ_ENTRY NAME"
.Ft void
.Fn SIMPLEQ_INSERT_AFTER "SIMPLEQ_HEAD *head" "struct TYPE *listelm" "struct TYPE *elm" "SIMPLEQ_ENTRY NAME"
.Ft void
.Fn SIMPLEQ_REMOVE_HEAD "SIMPLEQ_HEAD *head" "SIMPLEQ_ENTRY NAME"
.Pp
.Fn TAILQ_ENTRY "TYPE"
.Fn TAILQ_HEAD "HEADNAME" "TYPE"
.Fn TAILQ_HEAD_INITIALIZER "TAILQ_HEAD head"
.Ft "struct TYPE *"
.Fn TAILQ_FIRST "TAILQ_HEAD *head"
.Ft "struct TYPE *"
.Fn TAILQ_NEXT "struct TYPE *listelm" "TAILQ_ENTRY NAME"
.Ft "struct TYPE *"
.Fn TAILQ_END "TAILQ_HEAD *head"
.Ft "struct TYPE *"
.Fn TAILQ_LAST "TAILQ_HEAD *head" "HEADNAME NAME"
.Ft "struct TYPE *"
.Fn TAILQ_PREV "struct TYPE *listelm" "HEADNAME NAME" "TAILQ_ENTRY NAME"
.Ft int
.Fn TAILQ_EMPTY "TAILQ_HEAD *head"
.Fn TAILQ_FOREACH "VARNAME" "TAILQ_HEAD *head" "TAILQ_ENTRY NAME"
.Fn TAILQ_FOREACH_REVERSE "VARNAME" "TAILQ_HEAD *head" "HEADNAME" "TAILQ_ENTRY NAME"
.Ft void
.Fn TAILQ_INIT "TAILQ_HEAD *head"
.Ft void
.Fn TAILQ_INSERT_AFTER "TAILQ_HEAD *head" "struct TYPE *listelm" "struct TYPE *elm" "TAILQ_ENTRY NAME"
.Ft void
.Fn TAILQ_INSERT_BEFORE "struct TYPE *listelm" "struct TYPE *elm" "TAILQ_ENTRY NAME"
.Ft void
.Fn TAILQ_INSERT_HEAD "TAILQ_HEAD *head" "struct TYPE *elm" "TAILQ_ENTRY NAME"
.Ft void
.Fn TAILQ_INSERT_TAIL "TAILQ_HEAD *head" "struct TYPE *elm" "TAILQ_ENTRY NAME"
.Ft void
.Fn TAILQ_REMOVE "TAILQ_HEAD *head" "struct TYPE *elm" "TAILQ_ENTRY NAME"
.Ft void
.Fn TAILQ_REPLACE "TAILQ_HEAD *head" "struct TYPE *elm" "struct TYPE *elm2" "TAILQ_ENTRY NAME"
.Pp
.Fn CIRCLEQ_ENTRY "TYPE"
.Fn CIRCLEQ_HEAD "HEADNAME" "TYPE"
.Fn CIRCLEQ_HEAD_INITIALIZER "CIRCLEQ_HEAD head"
.Ft "struct TYPE *"
.Fn CIRCLEQ_FIRST "CIRCLEQ_HEAD *head"
.Ft "struct TYPE *"
.Fn CIRCLEQ_LAST "CIRCLEQ_HEAD *head"
.Ft "struct TYPE *"
.Fn CIRCLEQ_END "CIRCLEQ_HEAD *head"
.Ft "struct TYPE *"
.Fn CIRCLEQ_NEXT "struct TYPE *listelm" "CIRCLEQ_ENTRY NAME"
.Ft "struct TYPE *"
.Fn CIRCLEQ_PREV "struct TYPE *listelm" "CIRCLEQ_ENTRY NAME"
.Ft int
.Fn CIRCLEQ_EMPTY "CIRCLEQ_HEAD *head"
.Fn CIRCLEQ_FOREACH "VARNAME" "CIRCLEQ_HEAD *head" "CIRCLEQ_ENTRY NAME"
.Fn CIRCLEQ_FOREACH_REVERSE "VARNAME" "CIRCLEQ_HEAD *head" "CIRCLEQ_ENTRY NAME"
.Ft void
.Fn CIRCLEQ_INIT "CIRCLEQ_HEAD *head"
.Ft void
.Fn CIRCLEQ_INSERT_AFTER "CIRCLEQ_HEAD *head" "struct TYPE *listelm" "struct TYPE *elm" "CIRCLEQ_ENTRY NAME"
.Ft void
.Fn CIRCLEQ_INSERT_BEFORE "CIRCLEQ_HEAD *head" "struct TYPE *listelm" "struct TYPE *elm" "CIRCLEQ_ENTRY NAME"
.Ft void
.Fn CIRCLEQ_INSERT_HEAD "CIRCLEQ_HEAD *head" "struct TYPE *elm" "CIRCLEQ_ENTRY NAME"
.Ft void
.Fn CIRCLEQ_INSERT_TAIL "CIRCLEQ_HEAD *head" "struct TYPE *elm" "CIRCLEQ_ENTRY NAME"
.Ft void
.Fn CIRCLEQ_REMOVE "CIRCLEQ_HEAD *head" "struct TYPE *elm" "CIRCLEQ_ENTRY NAME"
.Ft void
.Fn CIRCLEQ_REPLACE "CIRCLEQ_HEAD *head" "struct TYPE *elm" "struct TYPE *elm2" "CIRCLEQ_ENTRY NAME"
.Sh DESCRIPTION
These macros define and operate on five types of data structures:
singly-linked lists, simple queues, lists, tail queues, and circular queues.
All five structures support the following functionality:
.Pp
.Bl -enum -compact -offset indent
.It
Insertion of a new entry at the head of the list.
.It
Insertion of a new entry after any element in the list.
.It
Removal of an entry from the head of the list.
.It
Forward traversal through the list.
.El
.Pp
Singly-linked lists are the simplest of the five data structures
and support only the above functionality.
Singly-linked lists are ideal for applications with large datasets
and few or no removals, or for implementing a LIFO queue.
.Pp
Simple queues add the following functionality:
.Pp
.Bl -enum -compact -offset indent
.It
Entries can be added at the end of a list.
.El
.Pp
However:
.Pp
.Bl -enum -compact -offset indent
.It
All list insertions must specify the head of the list.
.It
Each head entry requires two pointers rather than one.
.It
Code size is about 15% greater and operations run about 20% slower
than singly-linked lists.
.El
.Pp
Simple queues are ideal for applications with large datasets and
few or no removals, or for implementing a FIFO queue.
.Pp
All doubly linked types of data structures (lists, tail queues, and circle
queues) additionally allow:
.Pp
.Bl -enum -compact -offset indent
.It
Insertion of a new entry before any element in the list.
.It
Removal of any entry in the list.
.El
.Pp
However:
.Pp
.Bl -enum -compact -offset indent
.It
Each element requires two pointers rather than one.
.It
Code size and execution time of operations (except for removal) is about
twice that of the singly-linked data-structures.
.El
.Pp
Lists are the simplest of the doubly linked data structures and support
only the above functionality over singly-linked lists.
.Pp
Tail queues add the following functionality:
.Pp
.Bl -enum -compact -offset indent
.It
Entries can be added at the end of a list.
.It
They may be traversed backwards, at a cost.
.El
.Pp
However:
.Pp
.Bl -enum -compact -offset indent
.It
All list insertions and removals must specify the head of the list.
.It
Each head entry requires two pointers rather than one.
.It
Code size is about 15% greater and operations run about 20% slower
than singly-linked lists.
.El
.Pp
Circular queues add the following functionality:
.Pp
.Bl -enum -compact -offset indent
.It
Entries can be added at the end of a list.
.It
They may be traversed backwards, from tail to head.
.El
.Pp
However:
.Pp
.Bl -enum -compact -offset indent
.It
All list insertions and removals must specify the head of the list.
.It
Each head entry requires two pointers rather than one.
.It
The termination condition for traversal is more complex.
.It
Code size is about 40% greater and operations run about 45% slower than lists.
.El
.Pp
In the macro definitions,
.Fa TYPE
is the name tag of a user defined structure that must contain a field of type
.Li SLIST_ENTRY ,
.Li LIST_ENTRY ,
.Li SIMPLEQ_ENTRY ,
.Li TAILQ_ENTRY ,
or
.Li CIRCLEQ_ENTRY ,
named
.Fa NAME .
The argument
.Fa HEADNAME
is the name tag of a user defined structure that must be declared
using the macros
.Fn SLIST_HEAD ,
.Fn LIST_HEAD ,
.Fn SIMPLEQ_HEAD ,
.Fn TAILQ_HEAD ,
or
.Fn CIRCLEQ_HEAD .
See the examples below for further explanation of how these macros are used.
.Sh SINGLY-LINKED LISTS
A singly-linked list is headed by a structure defined by the
.Fn SLIST_HEAD
macro.
This structure contains a single pointer to the first element on the list.
The elements are singly linked for minimum space and pointer manipulation
overhead at the expense of O(n) removal for arbitrary elements.
New elements can be added to the list after an existing element or
at the head of the list.
A
.Fa SLIST_HEAD
structure is declared as follows:
.Bd -literal -offset indent
SLIST_HEAD(HEADNAME, TYPE) head;
.Ed
.Pp
where
.Fa HEADNAME
is the name of the structure to be defined, and struct
.Fa TYPE
is the type of the elements to be linked into the list.
A pointer to the head of the list can later be declared as:
.Bd -literal -offset indent
struct HEADNAME *headp;
.Ed
.Pp
(The names
.Li head
and
.Li headp
are user selectable.)
.Pp
The
.Fa HEADNAME
facility is often not used, leading to the following bizarre code:
.Bd -literal -offset indent
SLIST_HEAD(, TYPE) head, *headp;
.Ed
.Pp
The
.Fn SLIST_ENTRY
macro declares a structure that connects the elements in the list.
.Pp
The
.Fn SLIST_INIT
macro initializes the list referenced by
.Fa head .
.Pp
The list can also be initialized statically by using the
.Fn SLIST_HEAD_INITIALIZER
macro like this:
.Bd -literal -offset indent
SLIST_HEAD(HEADNAME, TYPE) head = SLIST_HEAD_INITIALIZER(head);
.Ed
.Pp
The
.Fn SLIST_INSERT_HEAD
macro inserts the new element
.Fa elm
at the head of the list.
.Pp
The
.Fn SLIST_INSERT_AFTER
macro inserts the new element
.Fa elm
after the element
.Fa listelm .
.Pp
The
.Fn SLIST_REMOVE_HEAD
macro removes the first element of the list pointed by
.Fa head .
.Pp
The
.Fn SLIST_REMOVE_NEXT
macro removes the list element immediately following
.Fa elm .
.Pp
The
.Fn SLIST_REMOVE
macro removes the element
.Fa elm
of the list pointed by
.Fa head .
.Pp
The
.Fn SLIST_FIRST
and
.Fn SLIST_NEXT
macros can be used to traverse the list:
.Bd -literal -offset indent
for (np = SLIST_FIRST(&head); np != NULL; np = SLIST_NEXT(np, NAME))
.Ed
.Pp
Or, for simplicity, one can use the
.Fn SLIST_FOREACH
macro:
.Bd -literal -offset indent
SLIST_FOREACH(np, head, NAME)
.Ed
.Pp
The
.Fn SLIST_FOREACH_PREVPTR
macro is similar to
.Fn SLIST_FOREACH
except that it stores a pointer to the previous element in
.Fa VARNAMEP .
This provides access to the previous element while traversing the list,
as one would have with a doubly-linked list.
.Pp
The
.Fn SLIST_EMPTY
macro should be used to check whether a simple list is empty.
.Sh SINGLY-LINKED LIST EXAMPLE
.Bd -literal
SLIST_HEAD(listhead, entry) head;
struct entry {
	...
	SLIST_ENTRY(entry) entries;	/* Simple list. */
	...
} *n1, *n2, *np;

SLIST_INIT(&head);			/* Initialize simple list. */

n1 = malloc(sizeof(struct entry));	/* Insert at the head. */
SLIST_INSERT_HEAD(&head, n1, entries);

n2 = malloc(sizeof(struct entry));	/* Insert after. */
SLIST_INSERT_AFTER(n1, n2, entries);

SLIST_FOREACH(np, &head, entries)	/* Forward traversal. */
	np-> ...

while (!SLIST_EMPTY(&head))		/* Delete. */
	SLIST_REMOVE_HEAD(&head, entries);
.Ed
.Sh LISTS
A list is headed by a structure defined by the
.Fn LIST_HEAD
macro.
This structure contains a single pointer to the first element on the list.
The elements are doubly linked so that an arbitrary element can be
removed without traversing the list.
New elements can be added to the list after an existing element,
before an existing element, or at the head of the list.
A
.Fa LIST_HEAD
structure is declared as follows:
.Bd -literal -offset indent
LIST_HEAD(HEADNAME, TYPE) head;
.Ed
.Pp
where
.Fa HEADNAME
is the name of the structure to be defined, and struct
.Fa TYPE
is the type of the elements to be linked into the list.
A pointer to the head of the list can later be declared as:
.Bd -literal -offset indent
struct HEADNAME *headp;
.Ed
.Pp
(The names
.Li head
and
.Li headp
are user selectable.)
.Pp
The
.Fa HEADNAME
facility is often not used, leading to the following bizarre code:
.Bd -literal -offset indent
LIST_HEAD(, TYPE) head, *headp;
.Ed
.Pp
The
.Fn LIST_ENTRY
macro declares a structure that connects the elements in the list.
.Pp
The
.Fn LIST_INIT
macro initializes the list referenced by
.Fa head .
.Pp
The list can also be initialized statically by using the
.Fn LIST_HEAD_INITIALIZER
macro like this:
.Bd -literal -offset indent
LIST_HEAD(HEADNAME, TYPE) head = LIST_HEAD_INITIALIZER(head);
.Ed
.Pp
The
.Fn LIST_INSERT_HEAD
macro inserts the new element
.Fa elm
at the head of the list.
.Pp
The
.Fn LIST_INSERT_AFTER
macro inserts the new element
.Fa elm
after the element
.Fa listelm .
.Pp
The
.Fn LIST_INSERT_BEFORE
macro inserts the new element
.Fa elm
before the element
.Fa listelm .
.Pp
The
.Fn LIST_REMOVE
macro removes the element
.Fa elm
from the list.
.Pp
The
.Fn LIST_REPLACE
macro replaces the list element
.Fa elm
with the new element
.Fa elm2 .
.Pp
The
.Fn LIST_FIRST
and
.Fn LIST_NEXT
macros can be used to traverse the list:
.Bd -literal -offset indent
for (np = LIST_FIRST(&head); np != NULL; np = LIST_NEXT(np, NAME))
.Ed
.Pp
Or, for simplicity, one can use the
.Fn LIST_FOREACH
macro:
.Bd -literal -offset indent
LIST_FOREACH(np, head, NAME)
.Ed
.Pp
The
.Fn LIST_EMPTY
macro should be used to check whether a list is empty.
.Sh LIST EXAMPLE
.Bd -literal
LIST_HEAD(listhead, entry) head;
struct entry {
	...
	LIST_ENTRY(entry) entries;	/* List. */
	...
} *n1, *n2, *np;

LIST_INIT(&head);			/* Initialize list. */

n1 = malloc(sizeof(struct entry));	/* Insert at the head. */
LIST_INSERT_HEAD(&head, n1, entries);

n2 = malloc(sizeof(struct entry));	/* Insert after. */
LIST_INSERT_AFTER(n1, n2, entries);

n2 = malloc(sizeof(struct entry));	/* Insert before. */
LIST_INSERT_BEFORE(n1, n2, entries);
					/* Forward traversal. */
LIST_FOREACH(np, &head, entries)
	np-> ...

while (!LIST_EMPTY(&head))		/* Delete. */
	LIST_REMOVE(LIST_FIRST(&head), entries);
.Ed
.Sh SIMPLE QUEUES
A simple queue is headed by a structure defined by the
.Fn SIMPLEQ_HEAD
macro.
This structure contains a pair of pointers, one to the first element in the
simple queue and the other to the last element in the simple queue.
The elements are singly linked.
New elements can be added to the queue after an existing element,
at the head of the queue or at the tail of the queue.
A
.Fa SIMPLEQ_HEAD
structure is declared as follows:
.Bd -literal -offset indent
SIMPLEQ_HEAD(HEADNAME, TYPE) head;
.Ed
.Pp
where
.Fa HEADNAME
is the name of the structure to be defined, and struct
.Fa TYPE
is the type of the elements to be linked into the queue.
A pointer to the head of the queue can later be declared as:
.Bd -literal -offset indent
struct HEADNAME *headp;
.Ed
.Pp
(The names
.Li head
and
.Li headp
are user selectable.)
.Pp
The
.Fn SIMPLEQ_ENTRY
macro declares a structure that connects the elements in
the queue.
.Pp
The
.Fn SIMPLEQ_INIT
macro initializes the queue referenced by
.Fa head .
.Pp
The queue can also be initialized statically by using the
.Fn SIMPLEQ_HEAD_INITIALIZER
macro like this:
.Bd -literal -offset indent
SIMPLEQ_HEAD(HEADNAME, TYPE) head = SIMPLEQ_HEAD_INITIALIZER(head);
.Ed
.Pp
The
.Fn SIMPLEQ_INSERT_HEAD
macro inserts the new element
.Fa elm
at the head of the queue.
.Pp
The
.Fn SIMPLEQ_INSERT_TAIL
macro inserts the new element
.Fa elm
at the end of the queue.
.Pp
The
.Fn SIMPLEQ_INSERT_AFTER
macro inserts the new element
.Fa elm
after the element
.Fa listelm .
.Pp
The
.Fn SIMPLEQ_REMOVE_HEAD
macro removes the first element
from the queue.
.Pp
The
.Fn SIMPLEQ_FIRST
and
.Fn SIMPLEQ_NEXT
macros can be used to traverse the queue.
The
.Fn SIMPLEQ_FOREACH
is used for queue traversal:
.Bd -literal -offset indent
SIMPLEQ_FOREACH(np, head, NAME)
.Ed
.Pp
The
.Fn SIMPLEQ_EMPTY
macro should be used to check whether a list is empty.
.Sh SIMPLE QUEUE EXAMPLE
.Bd -literal
SIMPLEQ_HEAD(listhead, entry) head = SIMPLEQ_HEAD_INITIALIZER(head);
struct entry {
	...
	SIMPLEQ_ENTRY(entry) entries;	/* Simple queue. */
	...
} *n1, *n2, *np;

n1 = malloc(sizeof(struct entry));	/* Insert at the head. */
SIMPLEQ_INSERT_HEAD(&head, n1, entries);

n2 = malloc(sizeof(struct entry));	/* Insert after. */
SIMPLEQ_INSERT_AFTER(&head, n1, n2, entries);

n2 = malloc(sizeof(struct entry));	/* Insert at the tail. */
SIMPLEQ_INSERT_TAIL(&head, n2, entries);
					/* Forward traversal. */
SIMPLEQ_FOREACH(np, &head, entries)
	np-> ...
					/* Delete. */
while (!SIMPLEQ_EMPTY(&head))
	SIMPLEQ_REMOVE_HEAD(&head, entries);
.Ed
.Sh TAIL QUEUES
A tail queue is headed by a structure defined by the
.Fn TAILQ_HEAD
macro.
This structure contains a pair of pointers,
one to the first element in the tail queue and the other to
the last element in the tail queue.
The elements are doubly linked so that an arbitrary element can be
removed without traversing the tail queue.
New elements can be added to the queue after an existing element,
before an existing element, at the head of the queue, or at the end
of the queue.
A
.Fa TAILQ_HEAD
structure is declared as follows:
.Bd -literal -offset indent
TAILQ_HEAD(HEADNAME, TYPE) head;
.Ed
.Pp
where
.Fa HEADNAME
is the name of the structure to be defined, and struct
.Fa TYPE
is the type of the elements to be linked into the tail queue.
A pointer to the head of the tail queue can later be declared as:
.Bd -literal -offset indent
struct HEADNAME *headp;
.Ed
.Pp
(The names
.Li head
and
.Li headp
are user selectable.)
.Pp
The
.Fn TAILQ_ENTRY
macro declares a structure that connects the elements in
the tail queue.
.Pp
The
.Fn TAILQ_INIT
macro initializes the tail queue referenced by
.Fa head .
.Pp
The tail queue can also be initialized statically by using the
.Fn TAILQ_HEAD_INITIALIZER
macro.
.Pp
The
.Fn TAILQ_INSERT_HEAD
macro inserts the new element
.Fa elm
at the head of the tail queue.
.Pp
The
.Fn TAILQ_INSERT_TAIL
macro inserts the new element
.Fa elm
at the end of the tail queue.
.Pp
The
.Fn TAILQ_INSERT_AFTER
macro inserts the new element
.Fa elm
after the element
.Fa listelm .
.Pp
The
.Fn TAILQ_INSERT_BEFORE
macro inserts the new element
.Fa elm
before the element
.Fa listelm .
.Pp
The
.Fn TAILQ_REMOVE
macro removes the element
.Fa elm
from the tail queue.
.Pp
The
.Fn TAILQ_REPLACE
macro replaces the list element
.Fa elm
with the new element
.Fa elm2 .
.Pp
.Fn TAILQ_FOREACH
and
.Fn TAILQ_FOREACH_REVERSE
are used for traversing a tail queue.
.Fn TAILQ_FOREACH
starts at the first element and proceeds towards the last.
.Fn TAILQ_FOREACH_REVERSE
starts at the last element and proceeds towards the first.
.Bd -literal -offset indent
TAILQ_FOREACH(np, &head, NAME)
TAILQ_FOREACH_REVERSE(np, &head, HEADNAME, NAME)
.Ed
.Pp
The
.Fn TAILQ_FIRST ,
.Fn TAILQ_NEXT ,
.Fn TAILQ_LAST
and
.Fn TAILQ_PREV
macros can be used to manually traverse a tail queue or an arbitrary part of
one.
.Pp
The
.Fn TAILQ_EMPTY
macro should be used to check whether a tail queue is empty.
.Sh TAIL QUEUE EXAMPLE
.Bd -literal
TAILQ_HEAD(tailhead, entry) head;
struct entry {
	...
	TAILQ_ENTRY(entry) entries;	/* Tail queue. */
	...
} *n1, *n2, *np;

TAILQ_INIT(&head);			/* Initialize queue. */

n1 = malloc(sizeof(struct entry));	/* Insert at the head. */
TAILQ_INSERT_HEAD(&head, n1, entries);

n1 = malloc(sizeof(struct entry));	/* Insert at the tail. */
TAILQ_INSERT_TAIL(&head, n1, entries);

n2 = malloc(sizeof(struct entry));	/* Insert after. */
TAILQ_INSERT_AFTER(&head, n1, n2, entries);

n2 = malloc(sizeof(struct entry));	/* Insert before. */
TAILQ_INSERT_BEFORE(n1, n2, entries);
					/* Forward traversal. */
TAILQ_FOREACH(np, &head, entries)
	np-> ...
					/* Manual forward traversal. */
for (np = n2; np != NULL; np = TAILQ_NEXT(np, entries))
	np-> ...
					/* Delete. */
while (np = TAILQ_FIRST(&head))
	TAILQ_REMOVE(&head, np, entries);
.Ed
.Sh CIRCULAR QUEUES
A circular queue is headed by a structure defined by the
.Fn CIRCLEQ_HEAD
macro.
This structure contains a pair of pointers,
one to the first element in the circular queue and the other to the
last element in the circular queue.
The elements are doubly linked so that an arbitrary element can be
removed without traversing the queue.
New elements can be added to the queue after an existing element,
before an existing element, at the head of the queue, or at the end
of the queue.
A
.Fa CIRCLEQ_HEAD
structure is declared as follows:
.Bd -literal -offset indent
CIRCLEQ_HEAD(HEADNAME, TYPE) head;
.Ed
.Pp
where
.Fa HEADNAME
is the name of the structure to be defined, and struct
.Fa TYPE
is the type of the elements to be linked into the circular queue.
A pointer to the head of the circular queue can later be declared as:
.Bd -literal -offset indent
struct HEADNAME *headp;
.Ed
.Pp
(The names
.Li head
and
.Li headp
are user selectable.)
.Pp
The
.Fn CIRCLEQ_ENTRY
macro declares a structure that connects the elements in the circular queue.
.Pp
The
.Fn CIRCLEQ_INIT
macro initializes the circular queue referenced by
.Fa head .
.Pp
The circular queue can also be initialized statically by using the
.Fn CIRCLEQ_HEAD_INITIALIZER
macro.
.Pp
The
.Fn CIRCLEQ_INSERT_HEAD
macro inserts the new element
.Fa elm
at the head of the circular queue.
.Pp
The
.Fn CIRCLEQ_INSERT_TAIL
macro inserts the new element
.Fa elm
at the end of the circular queue.
.Pp
The
.Fn CIRCLEQ_INSERT_AFTER
macro inserts the new element
.Fa elm
after the element
.Fa listelm .
.Pp
The
.Fn CIRCLEQ_INSERT_BEFORE
macro inserts the new element
.Fa elm
before the element
.Fa listelm .
.Pp
The
.Fn CIRCLEQ_REMOVE
macro removes the element
.Fa elm
from the circular queue.
.Pp
The
.Fn CIRCLEQ_REPLACE
macro replaces the list element
.Fa elm
with the new element
.Fa elm2 .
.Pp
The
.Fn CIRCLEQ_FIRST ,
.Fn CIRCLEQ_LAST ,
.Fn CIRCLEQ_END ,
.Fn CIRCLEQ_NEXT
and
.Fn CIRCLEQ_PREV
macros can be used to traverse a circular queue.
The
.Fn CIRCLEQ_FOREACH
is used for circular queue forward traversal:
.Bd -literal -offset indent
CIRCLEQ_FOREACH(np, head, NAME)
.Ed
.Pp
The
.Fn CIRCLEQ_FOREACH_REVERSE
macro acts like
.Fn CIRCLEQ_FOREACH
but traverses the circular queue backwards.
.Pp
The
.Fn CIRCLEQ_EMPTY
macro should be used to check whether a circular queue is empty.
.Sh CIRCULAR QUEUE EXAMPLE
.Bd -literal
CIRCLEQ_HEAD(circleq, entry) head;
struct entry {
	...
	CIRCLEQ_ENTRY(entry) entries;	/* Circular queue. */
	...
} *n1, *n2, *np;

CIRCLEQ_INIT(&head);			/* Initialize circular queue. */

n1 = malloc(sizeof(struct entry));	/* Insert at the head. */
CIRCLEQ_INSERT_HEAD(&head, n1, entries);

n1 = malloc(sizeof(struct entry));	/* Insert at the tail. */
CIRCLEQ_INSERT_TAIL(&head, n1, entries);

n2 = malloc(sizeof(struct entry));	/* Insert after. */
CIRCLEQ_INSERT_AFTER(&head, n1, n2, entries);

n2 = malloc(sizeof(struct entry));	/* Insert before. */
CIRCLEQ_INSERT_BEFORE(&head, n1, n2, entries);
					/* Forward traversal. */
CIRCLEQ_FOREACH(np, &head, entries)
	np-> ...
					/* Reverse traversal. */
CIRCLEQ_FOREACH_REVERSE(np, &head, entries)
	np-> ...
					/* Delete. */
while (!CIRCLEQ_EMPTY(&head))
	CIRCLEQ_REMOVE(&head, CIRCLEQ_FIRST(&head), entries);
.Ed
.Sh NOTES
It is an error to assume the next and previous fields are preserved
after an element has been removed from a list or queue.
Using any macro (except the various forms of insertion) on an element
removed from a list or queue is incorrect.
An example of erroneous usage is removing the same element twice.
.Pp
The
.Fn SLIST_END ,
.Fn LIST_END ,
.Fn SIMPLEQ_END
and
.Fn TAILQ_END
macros are provided for symmetry with
.Fn CIRCLEQ_END .
They expand to
.Dv NULL
and don't serve any useful purpose.
.Pp
Trying to free a list in the following way is a common error:
.Bd -literal -offset indent
LIST_FOREACH(var, head, entry)
	free(var);
free(head);
.Ed
.Pp
Since
.Va var
is free'd, the
.Fn FOREACH
macro refers to a pointer that may have been reallocated already.
Proper code needs a second variable.
.Bd -literal -offset indent
for (var = LIST_FIRST(head); var != LIST_END(head); var = nxt) {
	nxt = LIST_NEXT(var, entry);
	free(var);
}
LIST_INIT(head);	/* to put the list back in order */
.Ed
.Pp
A similar situation occurs when the current element is deleted
from the list.
Correct code saves a pointer to the next element in the list before
removing the element:
.Bd -literal -offset indent
for (var = LIST_FIRST(head); var != LIST_END(head); var = nxt) {
	nxt = LIST_NEXT(var, entry);
	if (some_condition) {
		LIST_REMOVE(var, entry);
		some_function(var);
	}
}
.Ed
.Sh HISTORY
The
.Nm queue
functions first appeared in
.Bx 4.4 .
