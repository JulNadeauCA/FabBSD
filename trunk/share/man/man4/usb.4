.\"	$OpenBSD: usb.4,v 1.101 2008/06/26 05:42:07 ray Exp $
.\"	$NetBSD: usb.4,v 1.15 1999/07/29 14:20:32 augustss Exp $
.\"
.\" Copyright (c) 1999 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to The NetBSD Foundation
.\" by Lennart Augustsson.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: June 26 2008 $
.Dt USB 4
.Os
.Sh NAME
.Nm usb
.Nd introduction to Universal Serial Bus support
.Sh SYNOPSIS
.Cd "ehci*   at cardbus?"
.Cd "ohci*   at cardbus?"
.Cd "ehci*   at pci?"
.Cd "uhci*   at pci?"
.Cd "ohci*   at pci?"
.Cd "usb*    at ehci? flags 0x00"
.Cd "usb*    at uhci? flags 0x00"
.Cd "usb*    at ohci? flags 0x00"
.Cd "uhub*   at usb?"
.Cd "uhub*   at uhub?"
.Pp
.Cd option	USBVERBOSE
.Pp
.Fd "#include <dev/usb/usb.h>"
.Fd "#include <dev/usb/usbhid.h>"
.Sh DESCRIPTION
FabBSD provides machine-independent bus support and drivers for Universal
Serial Bus
.Pq Tn USB
devices.
.Pp
The FabBSD
.Nm
driver has three layers (like
.Xr scsi 4
and
.Xr pcmcia 4 ) :
the controller, the bus, and the device layer.
The controller attaches to a physical bus (like
.Xr pci 4
or
.Xr cardbus 4 ) .
The
.Tn USB
bus attaches to the controller and the root hub attaches
to the controller.
Devices, which may include further hubs, attach to the root hub.
The attachment forms the same tree structure as the physical
.Tn USB
device tree.
For each
.Tn USB
device there may be additional drivers attached to it.
.Pp
The
.Cm uhub
driver controls
.Tn USB
hubs and must always be present since there is at least one root hub in any
.Tn USB
system.
.Pp
The
.Cm flags
are used to specify if the devices on the
.Tn USB
bus should be probed
early in the boot process.
If the
.Cm flags
are specified with a value of 1, the
.Tn USB
bus will be probed when the
.Tn USB
host device is attached instead of waiting
until kernel processes start running.
.Pp
FabBSD provides support for the following devices.
Note that not all architectures support all devices.
.Ss Storage devices
.Bl -tag -width 12n -offset ind -compact
.It Xr umass 4
.Tn USB
Mass Storage Devices, e.g., external disk drives
.El
.Ss Wired network interfaces
.Bl -tag -width 12n -offset ind -compact
.It Xr aue 4
ADMtek AN986/ADM8511 Pegasus family 10/100 USB Ethernet device
.It Xr axe 4
ASIX Electronics AX88172/AX88178/AX88772 10/100/Gigabit USB Ethernet device
.It Xr cdce 4
USB Communication Device Class Ethernet device
.It Xr cue 4
CATC USB-EL1201A USB Ethernet device
.It Xr kue 4
Kawasaki LSI KL5KUSB101B USB Ethernet device
.It Xr udav 4
Davicom DM9601 10/100 USB Ethernet device
.It Xr ueagle 4
Analog Devices Eagle ADSL modems
.It Xr url 4
Realtek RTL8150L 10/100 USB Ethernet device
.El
.Ss Wireless network interfaces
.Bl -tag -width 12n -offset ind -compact
.It Xr atu 4
Atmel AT76C50x IEEE 802.11b wireless network device
.It Xr rum 4
Ralink Technology USB IEEE 802.11a/b/g wireless network device
.It Xr uath 4
Atheros USB IEEE 802.11a/b/g wireless network device
.It Xr ubt 4
Bluetooth adapters
.It Xr upgt 4
Conexant/Intersil PrismGT SoftMAC USB IEEE 802.11b/g wireless network device
.It Xr ural 4
Ralink Technology USB IEEE 802.11b/g wireless network device
.It Xr wi 4
Intersil PRISM 2-3 IEEE 802.11b wireless network device
.It Xr zyd 4
ZyDAS ZD1211/ZD1211B USB IEEE 802.11b/g wireless network device
.El
.Ss Serial and parallel interfaces
.Bl -tag -width 12n -offset ind -compact
.It Xr moscom 4
MosChip Semiconductor MCS7703 based USB serial adapter
.It Xr uark 4
Arkmicro Technologies ARK3116 based USB serial adapter
.It Xr ubsa 4
Belkin USB serial adapter
.It Xr uchcom 4
WinChipHead CH341/340 based USB serial adapter
.It Xr ucom 4
USB tty support
.It Xr ucycom 4
Cypress microcontroller based USB serial adapter
.It Xr uftdi 4
FT8U100AX USB serial adapter
.It Xr uipaq 4
iPAQ USB units
.It Xr ulpt 4
USB printer support
.It Xr umct 4
MCT USB-RS232 USB serial adapter
.It Xr umodem 4
USB modem support
.It Xr umsm 4
Qualcomm MSM modem device
.It Xr uplcom 4
Prolific PL-2303 USB serial adapter
.It Xr uslcom 4
Silicon Laboratories CP2101/CP2102 based USB serial adapter
.It Xr uticom 4
Texas Instruments TUSB3410 USB serial adapter
.It Xr uvscom 4
SUNTAC Slipper U VS-10U USB serial adapter
.El
.Ss Time receiver devices
.Bl -tag -width 12n -offset ind -compact
.It Xr udcf 4
Gude ADS Expert mouseCLOCK USB timedelta sensor
.It Xr umbg 4
Meinberg Funkuhren USB5131 timedelta sensor
.El
.Ss Human Interface Devices
.Bl -tag -width 12n -offset ind -compact
.It Xr uhid 4
Generic driver for Human Interface Devices
.It Xr uhidev 4
Base driver for all Human Interface Devices
.It Xr ukbd 4
.Tn USB
keyboards that follow the boot protocol
.El
.Ss Miscellaneous devices
.Bl -tag -width 12n -offset ind -compact
.It Xr ugen 4
USB generic device support
.It Xr uow 4
Maxim/Dallas DS2490 USB 1-Wire adapter
.It Xr upl 4
Prolific based host-to-host adapters
.El
.Sh INTRODUCTION TO USB
There are different versions of the
.Tn USB
which provide different speeds.
.Tn USB
2 operates at 480Mb/s, while
.Tn USB
versions 1 and 1.1 operate at 12 Mb/s and 1.5 Mb/s for low speed devices.
Each
.Tn USB
has a host controller that is the master of the bus;
all other devices on the bus only speak when spoken to.
.Pp
There can be up to 127 devices (apart from the host controller)
on a bus, each with its own address.
The addresses are assigned
dynamically by the host when each device is attached to the bus.
.Pp
Within each device there can be up to 16 endpoints.
Each endpoint
is individually addressed and the addresses are static.
Each of these endpoints will communicate in one of four different modes:
control, isochronous, bulk, or interrupt.
A device always has at least one endpoint.
This is a control endpoint at address 0
and is used to give commands to the device and extract basic data,
such as descriptors, from the device.
Each endpoint, except the control endpoint, is unidirectional.
.Pp
The endpoints in a device are grouped into interfaces.
An interface is a logical unit within a device; e.g.,
a compound device with both a keyboard and a trackball would present
one interface for each.
An interface can sometimes be set into different modes,
called alternate settings, which affects how it operates.
Different alternate settings can have different endpoints
within it.
.Pp
A device may operate in different configurations.
Depending on the
configuration the device may present different sets of endpoints
and interfaces.
.Pp
Each device located on a hub has several
.Xr config 8
locators:
.Pp
.Bl -tag -width configuration -compact
.It Cd port
Number of the port on closest upstream hub.
.It Cd configuration
Configuration the device must be in for this driver to attach.
This locator does not set the configuration; it is iterated by the bus
enumeration.
.It Cd interface
Interface number within a device that an interface driver attaches to.
.It Cd vendor
16-bit vendor ID of the device.
.It Cd product
16-bit product ID of the device.
.It Cd release
16-bit release (revision) number of the device.
.El
.Pp
The first locator can be used to pin down a particular device
according to its physical position in the device tree.
The last three locators can be used to pin down a particular
device according to what device it actually is.
.Pp
The bus enumeration of the
.Tn USB
bus proceeds in several steps:
.Bl -enum
.It
Any device-specific driver can attach to the device.
.It
If none is found, any device class specific driver can attach.
.It
If none is found, all configurations are iterated over.
For each configuration all the interfaces are iterated over and interface
drivers can attach.
If any interface driver attached in a certain
configuration, the iteration over configurations is stopped.
.It
If still no drivers have been found, the generic
.Tn USB
driver can attach.
.El
.Sh USB CONTROLLER INTERFACE
Use the following to get access to the
.Tn USB
specific structures and defines:
.Bd -literal
.Fd #include <dev/usb/usb.h>
.Ed
.Pp
The
.Pa /dev/usbN
device can be opened and a few operations can be performed on it.
The
.Xr poll 2
system call will say that I/O is possible on the controller device when a
.Tn USB
device has been connected or disconnected to the bus.
.Pp
The following
.Xr ioctl 2
commands are supported on the controller device:
.Bl -tag -width xxxxxx
.\" .It Dv USB_DISCOVER
.\" This command will cause a complete bus discovery to be initiated.
.\" If any devices attached or detached from the bus they will be
.\" processed during this command.
.\" This is the only way that new devices are found on the bus.
.It Dv USB_DEVICEINFO Fa "struct usb_device_info *"
This command can be used to retrieve some information about a device
on the bus.
The
.Va udi_addr
field should be filled before the call and the other fields will
be filled by information about the device on that address.
Should no such device exist, an error is reported.
.Bd -literal
#define USB_MAX_DEVNAMES 4
#define USB_MAX_DEVNAMELEN 16
struct usb_device_info {
	u_int8_t	udi_bus;
	u_int8_t	udi_addr;	/* device address */
	usb_event_cookie_t udi_cookie;
	char		udi_product[USB_MAX_STRING_LEN];
	char		udi_vendor[USB_MAX_STRING_LEN];
	char		udi_release[8];
	u_int16_t	udi_productNo;
	u_int16_t	udi_vendorNo;
	u_int16_t	udi_releaseNo;
	u_int8_t	udi_class;
	u_int8_t	udi_subclass;
	u_int8_t	udi_protocol;
	u_int8_t	udi_config;
	u_int8_t	udi_speed;
#define USB_SPEED_LOW  1
#define USB_SPEED_FULL 2
#define USB_SPEED_HIGH 3
	int		udi_power;	/* power consumption */
	int		udi_nports;
	char		udi_devnames[USB_MAX_DEVNAMES]
			    [USB_MAX_DEVNAMELEN];
	u_int8_t	udi_ports[16];	/* hub only */
#define USB_PORT_ENABLED 0xff
#define USB_PORT_SUSPENDED 0xfe
#define USB_PORT_POWERED 0xfd
#define USB_PORT_DISABLED 0xfc
};
.Ed
.Pp
The
.Va udi_bus
field contains the device unit number of the device.
.Pp
The
.Va udi_product ,
.Va udi_vendor ,
and
.Va udi_release
fields contain self-explanatory descriptions of the device.
The
.Va udi_productNo ,
.Va udi_vendorNo ,
and
.Va udi_releaseNo
fields contain numeric identifiers for the device.
.Pp
The
.Va udi_class
and
.Va udi_subclass
fields contain the device class and subclass.
.Pp
The
.Va udi_config
field shows the current configuration of the device.
.Pp
The
.Va udi_protocol
field contains the device protocol as given from the device.
.Pp
The
.Va udi_speed
field
contains the speed of the device.
.Pp
The
.Va udi_power
field shows the power consumption in milli-amps drawn at 5 volts
or is zero if the device is self powered.
.Pp
The
.Va udi_devnames
field contains the names and instance numbers of the device drivers
for the devices attached to this device.
.Pp
If the device is a hub, the
.Va udi_nports
field is non-zero and the
.Va udi_ports
field contains the addresses of the connected devices.
If no device is connected to a port, one of the
.Dv USB_PORT_*
values indicates its status.
.It Dv USB_DEVICESTATS Fa "struct usb_device_stats *"
This command retrieves statistics about the controller.
.Bd -unfilled
struct usb_device_stats {
	u_long	uds_requests[4];
};
.Ed
.Pp
The
.Va uds_requests
field is indexed by the transfer kind, i.e.\&
.Dv UE_* ,
and indicates how many transfers of each kind have been completed
by the controller.
.It Dv USB_REQUEST Fa "struct usb_ctl_request *"
This command can be used to execute arbitrary requests on the control pipe.
This is
.Em DANGEROUS
and should be used with great care since it
can destroy the bus integrity.
.Pp
The
.Vt usb_ctl_request
structure has the following definition:
.Bd -literal
typedef struct {
        uByte           bmRequestType;
        uByte           bRequest;
        uWord           wValue;
        uWord           wIndex;
        uWord           wLength;
} __packed usb_device_request_t;

struct usb_ctl_request {
	int	ucr_addr;
	usb_device_request_t ucr_request;
	void	*ucr_data;
	int	ucr_flags;
#define USBD_SHORT_XFER_OK 0x04	/* allow short reads */
	int	ucr_actlen;	/* actual length transferred */
};
.Ed
.Pp
The
.Va ucr_addr
field identifies the device on which to perform the request.
The
.Va ucr_request
field identifies parameters of the request, such as length and type.
The
.Va ucr_data
field contains the location where data will be read from or written to.
The
.Va ucr_flags
field specifies options for the request, and the
.Va ucr_actlen
field contains the actual length transferred as the result of the request.
.El
.Pp
The include file
.Aq Pa dev/usb/usb.h
contains definitions for the types used by the various
.Xr ioctl 2
calls.
The naming convention of the fields for the various
.Tn USB
descriptors exactly follows the naming in the
.Tn USB
specification.
Byte sized fields can be accessed directly, but word (16-bit)
sized fields must be accessed by the
.Fn UGETW field
and
.Fn USETW field value
macros and double word (32-bit) sized fields must be accessed by the
.Fn UGETDW field
and
.Fn USETDW field value
macros to handle byte order and alignment properly.
.Pp
The include file
.Aq Pa dev/usb/usbhid.h
similarly contains the definitions for
Human Interface Devices
.Pq Tn HID .
.Sh SEE ALSO
.Xr usbhidaction 1 ,
.Xr usbhidctl 1 ,
.Xr ioctl 2 ,
.Xr ehci 4 ,
.Xr ohci 4 ,
.Xr uhci 4 ,
.Xr config 8 ,
.Xr usbdevs 8
.Pp
The
.Tn USB
specifications can be found at:
.Pp
.Dl http://www.usb.org/developers/docs/
.Sh HISTORY
The
.Nm
driver
appeared in
.Ox 2.6 .
