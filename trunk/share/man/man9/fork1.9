.\"	$OpenBSD: fork1.9,v 1.11 2008/06/26 05:42:08 ray Exp $
.\"	$NetBSD: fork1.9,v 1.3 1999/03/16 00:40:47 garbled Exp $
.\"
.\" Copyright (c) 1998 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to The NetBSD Foundation
.\" by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
.\" NASA Ames Research Center.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: June 26 2008 $
.Dt FORK1 9
.Os
.Sh NAME
.Nm fork1
.Nd create a new process
.Sh SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <sys/proc.h>
.Ft int
.Fn "fork1" "struct proc *p1" "int exitsig" "int flags" "void *stack" "size_t stacksize" "void (*func)(void *)" "void *arg" "register_t *retval"
.Sh DESCRIPTION
.Fn fork1
creates a new process out of
.Ar p1 ,
which should be the current process.
This function is used primarily to implement the
.Xr fork 2 ,
.Xr rfork 2 ,
.Xr vfork 2
system calls, as well as the
.Xr kthread_create 9
function.
.Pp
The
.Ar flags
argument is used to control the behavior of the fork and is created by
a bitwise-OR of the following values:
.Bl -tag -width FORK_SHAREFILES
.It Dv FORK_FORK
The call is done by the
.Xr fork 2
system call.
Used only for statistics.
.It Dv FORK_VFORK
The call is done by the
.Xr vfork 2
system call.
Used only for statistics.
.It Dv FORK_RFORK
The call is done by the
.Xr rfork 2
system call.
Used only for statistics.
.It Dv FORK_PPWAIT
Suspend the parent process until the child is terminated (by calling
.Xr _exit 2
or abnormally), or makes a call to
.Xr execve 2 .
.It Dv FORK_SHAREFILES
Let the child share the file descriptor table with the parent through
fdshare().
The default behavior is to copy the table through
fdcopy().
.It Dv FORK_CLEANFILES
The child starts with a clean file descriptor table created by
fdinit().
.It Dv FORK_NOZOMBIE
The child will be dissociated from the parent and will not leave a status
for the parent to collect.
See
.Xr wait 2 .
.It Dv FORK_SHAREVM
The child will share the parent's address space.
The default behavior is
that the child gets a copy-on-write copy of the address space.
.El
.Pp
If
.Fa stack
is not
.Dv NULL ,
the area starting at
.Fa stack
of extent
.Fa stacksize
will be used for the child's stack, instead of cloning the parent's
stack.
.Pp
If
.Fa retval
is not
.Dv NULL ,
it will hold the following values after successful completion
of the fork operation:
.Bl -tag -width retval[0]
.It Fa retval[0]
This will contain the pid of the child process.
.It Fa retval[1]
In the parent process, this will contain the value 0.
In the child process, this will contain 1.
.El
.Pp
The signal
.Fa exitsig
is sent to the parent
.Fa p1
on exit of the new process.
.Pp
If
.Fa func
is not
.Dv NULL ,
the new process will begin execution by calling this function.
It defaults to child_return, which returns to userland.
.Pp
If
.Fa arg
is not
.Dv NULL ,
it is the argument to the previous function.
It defaults to a pointer to the new process.
.Sh RETURN VALUES
Upon successful completion of the fork operation,
.Fn fork1
returns 0.
Otherwise, the following error values are returned:
.Bl -tag -width [EAGAIN]
.It Bq Er EAGAIN
The limit on the total number of system processes would be exceeded.
.It Bq Er EAGAIN
The limit
.Dv RLIMIT_NPROC
on the total number of processes under execution by this
user id would be exceeded.
.El
.Sh SEE ALSO
.Xr execve 2 ,
.Xr fork 2 ,
.Xr rfork 2 ,
.Xr vfork 2 ,
.Xr kthread_create 9 ,
.Xr pfind 9 ,
.Xr psignal 9 ,
.Xr uvm_fork 9
.Sh CAVEATS
The
.Nm
function semantics are specific to FabBSD and
.Ox .
Other BSD systems have different semantics.
.Pp
The system never uses
.Fn fork1
with a non-null
.Fa stack ,
so that feature is not even tested.
